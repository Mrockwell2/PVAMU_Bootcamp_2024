/**
 * This file was automatically generated by the ICG based on the file:
 * /Users/obcrawfo/trick/trick-19.8.0/trick_sims/SIM_sat2d/models/satellite/include/Satellite.hh
 * This file contains database parameter declarations specific to the
 * data structures and enumerated types declared in the above file.
 * These database parameters are used by the Trick input and
 * data recording processors to gain access to important simulation
 * variable information.
 */

#define TRICK_IN_IOSRC
#include <stdlib.h>
#include "trick/MemoryManager.hh"
#include "trick/attributes.h"
#include "trick/parameter_types.h"
#include "trick/ClassSizeCheck.hh"
#include "trick/UnitsMap.hh"
#include "trick/checkpoint_stl.hh"
#include "/Users/obcrawfo/trick/trick-19.8.0/trick_sims/SIM_sat2d/models/satellite/include/Satellite.hh"

extern "C" {

ATTRIBUTES attrSatellite[] = {
{"pos", "double", "m", "", "",
  "xyz-position",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  0, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"vel", "double", "m/s", "", "",
  "xyz-velocity",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  16, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"acc", "double", "m/s2", "", "",
  "xyz-acceleration",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  32, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"pos_tgt", "double", "m", "", "",
  "xyz-position",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  48, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"vel_tgt", "double", "m/s", "", "",
  "xyz-velocity",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  64, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"acc_tgt", "double", "m/s2", "", "",
  "xyz-acceleration",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  80, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"veh1_radius", "double", "m", "", "",
  "xyz-velocity",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  96, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"veh2_radius", "double", "m", "", "",
  "xyz-velocity",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  104, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"thrust1_fired", "int", "1", "", "",
  "",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 0,
  112, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"thrust2_fired", "int", "1", "", "",
  "",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 0,
  116, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"burn1_time", "double", "1", "", "",
  "",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  120, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"burn2_time", "double", "1", "", "",
  "",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  128, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"


void init_attrSatellite() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

}

extern "C" {

void init_attrSatellite_c_intf() {
    init_attrSatellite() ;
}

size_t io_src_sizeof_Satellite() {
    return sizeof(Satellite) ;
}

void* io_src_allocate_Satellite(int num) {
    Satellite* temp = (Satellite*)calloc(num, sizeof(Satellite));
    for (int ii = 0; ii < num; ++ii) {
        new(&temp[ii]) Satellite();
    }
    return (void*)temp;
}

void io_src_destruct_Satellite(void* address __attribute__((unused)), int num __attribute__((unused))) {
Satellite* temp = (Satellite*)address;
    for (int ii = 0; ii < num; ++ii) {
        temp[ii].~Satellite();
    }
}

void io_src_delete_Satellite(void* address) {
    delete (Satellite*)address;
}

} //extern "C"

struct UnitsMapSatellite {
    UnitsMapSatellite() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("Satellite_pos", "m") ;
        units_map_ptr->add_param("Satellite_vel", "m/s") ;
        units_map_ptr->add_param("Satellite_acc", "m/s2") ;
        units_map_ptr->add_param("Satellite_pos_tgt", "m") ;
        units_map_ptr->add_param("Satellite_vel_tgt", "m/s") ;
        units_map_ptr->add_param("Satellite_acc_tgt", "m/s2") ;
        units_map_ptr->add_param("Satellite_veh1_radius", "m") ;
        units_map_ptr->add_param("Satellite_veh2_radius", "m") ;
        units_map_ptr->add_param("Satellite_thrust1_fired", "1") ;
        units_map_ptr->add_param("Satellite_thrust2_fired", "1") ;
        units_map_ptr->add_param("Satellite_burn1_time", "1") ;
        units_map_ptr->add_param("Satellite_burn2_time", "1") ;
    }
} umSatellite;

