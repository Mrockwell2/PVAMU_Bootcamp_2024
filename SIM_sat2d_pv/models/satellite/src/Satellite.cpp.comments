/********************************* TRICK HEADER *******************************
PURPOSE: ( Simulate a satellite orbiting the Earth. )
LIBRARY DEPENDENCY:
    ((Satellite.o))
*******************************************************************************/
#include "../include/Satellite.hh"
#include <math.h>
#include <iostream>

int Satellite::default_data() {

    thrust1_fired = 0;
    thrust2_fired = 0;

    pos[0] = 0.0;
    pos[1] = 6578000.0;
    //vel[0] = 7905.0;
    vel[0] = 7784.40;
    //vel[0] = 8261.23;
    vel[1] = 0.0;

    pos_tgt[0] = 0.0;
    //pos_tgt[1] = 7478000;
    //vel_tgt[0] = 7300.95;
    pos_tgt[1] = 8478000;
    vel_tgt[0] = 6856.86;
    vel_tgt[1] = 0.0;

    burn1_time = 2 * M_PI * sqrt(pos[0]*pos[0] + pos[1]*pos[1]) / vel[0];
   // std::cout << " @@@ big period is   " << 2 * M_PI * sqrt(pos_tgt[0]*pos_tgt[0] + pos_tgt[1]*pos_tgt[1]) / vel_tgt[0] << "\n";
    burn2_time = 2 * M_PI * sqrt(pos_tgt[0]*pos_tgt[0] + pos_tgt[1]*pos_tgt[1]) / vel_tgt[0];
    //burn2_time = 2 * M_PI * sqrt( pow((sqrt(pos_tgt[0]*pos_tgt[0] + pos_tgt[1]*pos_tgt[1])), 3) / GRAVITATIONAL_CONSTANT * EARTH_MASS);
    //burn2_time = 2 * M_PI * sqrt(pos_tgt[0]*pos_tgt[0] + pos_tgt[1]*pos_tgt[1]) / vel[0];

    return (0);
}

int Satellite::state_init() {
    return (0);
}

double Satellite::calc_thrust_force(double vel2, double vel1, double delta_t) {
    //double burn_target_velocity = sqrt(2 * GRAVITATIONAL_CONSTANT * EARTH_MASS * ((1/radius) - (1/(veh1_radius+veh2_radius))));
    return( (100000.0 * (vel2 - vel1)) / delta_t  );
}


int Satellite::calc_veh2_theta() {
    double burn1_target_velocity = sqrt(2 * GRAVITATIONAL_CONSTANT * EARTH_MASS * ((1/veh1_radius) - (1/(veh1_radius+veh2_radius))));
    double cur_veh2_theta = atan((pos[1] - 8478000) / (pos[0] - 0));
    if ((cur_veh2_theta - -0.267) < 1e-6) {
        return(1);
    }
    return(0);
}


int Satellite::state_deriv( double sim_time) {

   veh1_radius = sqrt( pos[0]*pos[0] + pos[1]*pos[1]);
   veh2_radius = sqrt( pos_tgt[0]*pos_tgt[0] + pos_tgt[1]*pos_tgt[1]);

   acc[0] = -pos[0] * GRAVITATIONAL_CONSTANT * EARTH_MASS / pow(veh1_radius,3);
   acc[1] = -pos[1] * GRAVITATIONAL_CONSTANT * EARTH_MASS / pow(veh1_radius,3);

   acc_tgt[0] = -pos_tgt[0] * GRAVITATIONAL_CONSTANT * EARTH_MASS / pow(veh2_radius,3);
   acc_tgt[1] = -pos_tgt[1] * GRAVITATIONAL_CONSTANT * EARTH_MASS / pow(veh2_radius,3);

   //if (thrust1_fired == 1 && sim_time >=  7768.69) {
   //   std::cout << " @@@ thrust 1 hasn't happenend yet. acc_tgt is acc_tgt[0] is  " << acc_tgt[0] << "\n";
   //   std::cout << " @@@ thrust 1 hasn't happenend yet. vel_tgt is vel_tgt[0] is  " << vel_tgt[0] << "\n";
   //   thrust1_fired = 2;
   //}

   //if (thrust1_fired == 0 && int(pos[1]) == 0 && pos[0] > 0.0) {
//   if (thrust1_fired == 0 && veh1_period_flag(sim_time) == 1 && calc_veh2_theta() == 1 ) {
   if (thrust1_fired == 0 && sim_time >= burn1_time ) {
      std::cout << " @@@ thrust 1 hasn't happenend yet. acc is acc[0] is  " << acc[0] << "\n";
      std::cout << " @@@ thrust 1 hasn't happenend yet. vel is vel[0] is  " << vel[0] << "\n";
      std::cout << " @@@ thrust 1 hasn't happenend yet. radius 1      is  " << veh1_radius << "\n";
      std::cout << " @@@ thrust 1 hasn't happenend yet. radius 2      is  " << veh2_radius << "\n";
      std::cout << " @@@ thrust 1 hasn't happenend yet. burn1_time    is  " << burn1_time << "\n";
      std::cout << " @@@ thrust 1 hasn't happenend yet. burn2_time    is  " << burn2_time << "\n";
      std::cout << " @@@ thrust 1 hasn't happenend yet. pos_tgt[0]    is  " << pos_tgt[0] << "\n";
      std::cout << " @@@ thrust 1 hasn't happenend yet. pos_tgt[1]    is  " << pos_tgt[1] << "\n";
      //burn2_time = 2 * M_PI * sqrt(pow((veh1_radius + veh2_radius),3) / GRAVITATIONAL_CONSTANT * EARTH_MASS);
   //   burn2_time = sqrt((4 * M_PI * M_PI / 3) / GRAVITATIONAL_CONSTANT * EARTH_MASS);
   //   std::cout << " @@@ thrust 1 hasn't happenend yet. burn2_time    is  " << burn2_time << "\n";
      double burn1_target_velocity = sqrt(2 * GRAVITATIONAL_CONSTANT * EARTH_MASS * ((1/veh1_radius) - (1/(veh1_radius+veh2_radius))));
      std::cout << " @@@ thrust 1 was just fired and burn1_target_velocity is  " << burn1_target_velocity << "\n";
   //   double some_val = (-8270.32 - -7784.11)/veh1_radius;
      double burn1_force  = calc_thrust_force(burn1_target_velocity, 7784.40, 3.331e-4) ;
      std::cout << " @@@ thrust 1 hasn't happened yet and burn1_force  is  " << burn1_force  << "\n";
      acc[0] = 1430500 ; // F = 1430500000000 N, m = 1000000, vel[0] at thrust is 8260.93 from formula, delta t = .0003
      acc[0] = 143029120384.26907 / 100000.0 ; // F = 1430500000000 N, m = 1000000, vel[0] at thrust is 8260.93 from formula, delta t = .0003
      acc[0] =  burn1_force / 100000.0 ; // F = 1430500000000 N, m = 1000000, vel[0] at thrust is 8260.93 from formula, delta t = .0003
      std::cout << " @@@ thrust 1 was just fired and target_velo      is " << burn1_target_velocity << "\n";
   //   //std::cout << " @@@ thrust 1 was just fired and val    is  " << some_val << "\n";
      burn2_time =  (M_PI * sqrt(pos_tgt[0]*pos_tgt[0] + pos_tgt[1]*pos_tgt[1]) / burn1_target_velocity) + sim_time;
      std::cout << " @@@ thrust 1 hasn't happenend yet. burn2_time    is  " << burn2_time << "\n";
      thrust1_fired = 1;
   }

   //if (thrust1_fired == 1 && int(pos[0]) == 0 && pos[1] < 0.0 ) {
   if (thrust2_fired == 0 && thrust1_fired == 1 && sim_time >= burn2_time ) {
      double burn2_target_velocity = sqrt(2 * GRAVITATIONAL_CONSTANT * EARTH_MASS * ((1/veh2_radius) - (1/(veh1_radius+veh2_radius))));
      //acc[1] = burn2_target_velocity - vel[1] / 0.1;
      //acc[0] =  -613564797182.8572; // F = 1430500000000 N, m = 1000000, vel[0] at thrust is 8260.93 from formula
      acc[0] = -566.67;
      acc[0] = -1320100; // i mean its the closest
      acc[0] = -1319830; // i mean its the closest
      acc[0] = -1330100; // i mean its the closest by far
      double burn2_force  = calc_thrust_force(6856.86, burn2_target_velocity,  1.407e-7) ;
      std::cout << " @@@ thrust 1 hasn't happened yet and burn1_force  is  " << burn2_force  << "\n";
      acc[0] = burn2_force / 100000; // i mean its the closest by farthest!!!
      std::cout << " @@@ thrust 2 was just fired and burn2  is " << burn2_target_velocity << "\n";
      std::cout << " @@@ thrust 2 was just fired and radius is " << veh1_radius << "\n";
      thrust2_fired = 1;
   }

   return(0);
}

#include "sim_services/Integrator/include/integrator_c_intf.h"

int Satellite::state_integ() {

   int integration_step;

   //veh1_radius = sqrt( pos[0]*pos[0] + pos[1]*pos[1]);
   //veh2_radius = sqrt( pos_tgt[0]*pos_tgt[0] + pos_tgt[1]*pos_tgt[1]);

   //if (thrust1_fired == 0 && int(pos[1]) == 0 && pos[0] > 0.0) {
   //   vel[1] = -1 * sqrt(2 * GRAVITATIONAL_CONSTANT * EARTH_MASS * ((1/veh1_radius) - (1/(veh1_radius+veh2_radius))));
   //   std::cout << " @@@ thrust 1 was just fired and vel[1] is  " << vel[1] << "\n";
   //   thrust1_fired = 1;
   //}

   //if (thrust2_fired == 0 && thrust1_fired == 1 && int(pos[1]) == 0 && pos[0] < 0) {
   //   vel[1] = sqrt(2 * GRAVITATIONAL_CONSTANT * EARTH_MASS * ((1/veh2_radius) - (1/(veh1_radius+veh2_radius))));
   //   std::cout << " @@@ thrust 2 was just fired and vel1 is " << vel[1] << "\n";
   //   thrust2_fired = 2;
   //}


   load_state ( &pos[0], &pos[1], &pos_tgt[0], &pos_tgt[1], &vel[0], &vel[1], &vel_tgt[0], &vel_tgt[1], (double*)0);
   load_deriv ( &vel[0], &vel[1], &vel_tgt[0], &vel_tgt[1], &acc[0], &acc[1], &acc_tgt[0], &acc_tgt[1], (double*)0);

   integration_step = integrate();

   unload_state( &pos[0], &pos[1], &pos_tgt[0], &pos_tgt[1], &vel[0], &vel[1], &vel_tgt[0], &vel_tgt[1], (double*)0);

   if (thrust2_fired == 1 ) {
      std::cout << " @@@ thrust 2 was just fired and vel[0] is " << vel[0] << "\n";
      thrust2_fired = 2;
   }
   return(integration_step);
}

